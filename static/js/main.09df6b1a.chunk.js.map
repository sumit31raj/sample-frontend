{"version":3,"sources":["components/Dropdown/index.module.css","components/Dropdown/index.js","components/MainContainer/index.js","components/SideBar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DropdownComponent","label","className","styles","dropdownContainer","Dropdown","Toggle","variant","id","Menu","Item","href","MainContainer","Card","Body","Title","Text","Button","SideBar","strokeWidth","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,kBAAoB,sC,yPCqBvBC,EAlBW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3B,OACE,yBAAKC,UAAWC,IAAOC,mBACrB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBACnCP,GAGH,kBAACI,EAAA,EAASI,KAAV,KACE,kBAACJ,EAAA,EAASK,KAAV,CAAeC,KAAK,cAApB,UACA,kBAACN,EAAA,EAASK,KAAV,CAAeC,KAAK,cAApB,kBACA,kBAACN,EAAA,EAASK,KAAV,CAAeC,KAAK,cAApB,sBCcKC,G,MAvBO,WACpB,OACE,yBAAKV,UAAU,iBACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAmBD,MAAM,YACzB,kBAAC,EAAD,CAAmBA,MAAM,eACzB,kBAAC,EAAD,CAAmBA,MAAM,YACzB,kBAAC,EAAD,CAAmBA,MAAM,kBAE3B,kBAACY,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,mBACA,kBAACF,EAAA,EAAKG,KAAN,uGAIA,kBAACC,EAAA,EAAD,CAAQV,QAAQ,WAAhB,qB,QCeKW,G,YAhCC,WACd,OACE,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAiCiB,YAAa,EAAGC,MAAO,IACtD,uBAAGlB,UAAU,iBAAb,YACA,2BAAG,0BAAMA,UAAU,mBAAhB,MAA2C,0BAAMA,UAAU,oBAAhB,SAGlD,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBAAf,aAGA,yBAAKA,UAAU,mBAAf,OACM,0BAAMA,UAAU,iBAAhB,gBAGR,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBAAf,WAGA,yBAAKA,UAAU,mBAAf,MACK,0BAAMA,UAAU,iBAAhB,gBAGP,yBAAKA,UAAU,YAAf,mC,MCjBOmB,MATf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09df6b1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdownContainer\":\"Dropdown_dropdownContainer__2r5gi\"};","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport styles from './index.module.css';\n\nconst DropdownComponent = ({ label }) => {\n  return (\n    <div className={styles.dropdownContainer}>\n      <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n          {label}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default DropdownComponent;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport DropdownComponent from '../Dropdown';\nimport './index.css';\n\nconst MainContainer = () => {\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"filters\">\n        <DropdownComponent label=\"Popular\"/>\n        <DropdownComponent label=\"Arithmetic\"/>\n        <DropdownComponent label=\"Popular\"/>\n        <DropdownComponent label=\"More Filters\"/>\n      </div>\n      <Card>\n        <Card.Body>\n          <Card.Title>Card Title</Card.Title>\n          <Card.Text>\n            Some quick example text to build on the card title and make up the bulk of\n            the card's content.\n          </Card.Text>\n          <Button variant=\"primary\">Go somewhere</Button>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default MainContainer;\n","import React from 'react';\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './index.css';\n\nconst SideBar = () => {\n  return (\n    <div className=\"sideBar\">\n      <div className=\"sideBarInner\" >\n        <div className=\"progressBar\">\n          <CircularProgressbarWithChildren strokeWidth={1} value={75}>\n            <p className=\"accuracyLabel\">ACCURACY</p>\n            <p><span className=\"percentageLabel\">75</span><span className=\"percentageSymbol\"> %</span></p>\n          </CircularProgressbarWithChildren>\n        </div>\n        <div className=\"completedDiv\" >\n          <div className=\"completedHeading\" > \n            Completed\n          </div>\n          <div className=\"completedNumber\" > \n            100 <span className=\"problemsTitle\" > problems </span>\n          </div>\n        </div>\n        <div className=\"completedDiv\" >\n          <div className=\"completedHeading\" > \n            Correct\n          </div>\n          <div className=\"completedNumber\" > \n            75 <span className=\"problemsTitle\" > problems </span>\n          </div>\n        </div>\n        <div className=\"pastData\" > past 24 hours, 2020  2/20 </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from 'react';\nimport MainContainer from './components/MainContainer';\nimport SideBar from './components/SideBar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SideBar />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}